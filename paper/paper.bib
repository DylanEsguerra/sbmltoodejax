@article{alquraishiDifferentiableBiologyUsing2021,
  title = {Differentiable Biology: Using Deep Learning for Biophysics-Based and Data-Driven Modeling of Molecular Mechanisms},
  shorttitle = {Differentiable Biology},
  author = {AlQuraishi, Mohammed and Sorger, Peter K.},
  year = {2021},
  month = oct,
  journal = {Nature Methods},
  volume = {18},
  number = {10},
  pages = {1169--1180},
  publisher = {{Nature Publishing Group}},
  issn = {1548-7105},
  doi = {10.1038/s41592-021-01283-4},
  urldate = {2023-05-26},
  abstract = {Deep learning using neural networks relies on a class of machine-learnable models constructed using `differentiable programs'. These programs can combine mathematical equations specific to a particular domain of natural science with general-purpose, machine-learnable components trained on experimental data. Such programs are having a growing impact on molecular and cellular biology. In this Perspective, we describe an emerging `differentiable biology' in which phenomena ranging from the small and specific (for example, one experimental assay) to the broad and complex (for example, protein folding) can be modeled effectively and efficiently, often by exploiting knowledge about basic natural phenomena to overcome the limitations of sparse, incomplete and noisy data. By distilling differentiable biology into a small set of conceptual primitives and illustrative vignettes, we show how it can help to address long-standing challenges in integrating multimodal data from diverse experiments across biological scales. This promises to benefit fields as diverse as biophysics and functional genomics.},
  copyright = {2021 Springer Nature America, Inc.},
  langid = {english},
  keywords = {Computational models,Computational platforms and environments,Machine learning},
  file = {/home/mayalen/Zotero/storage/SKUWJDBW/AlQuraishi and Sorger - 2021 - Differentiable biology using deep learning for bi.pdf}
}

@misc{Bergmann_copasi_basico_Release_0_48_2023,
  title = {Copasi/Basico: {{Release}} 0.48},
  author = {Bergmann, Frank T.},
  year = {2023},
  month = mar
}

@article{Bornstein2008libsbml,
  title = {{{LibSBML}}: {{An API}} Library for {{SBML}}},
  author = {Bornstein, Benjamin J. and Keating, Sarah M. and Jouraku, Akiya and Hucka, Michael},
  year = {2008},
  journal = {Bioinformatics (Oxford, England)},
  volume = {24},
  number = {6},
  pages = {880--881},
  issn = {1367-4803},
  doi = {10.1093/bioinformatics/btn051}
}

@article{camachoNextGenerationMachineLearning2018a,
  title = {Next-{{Generation Machine Learning}} for {{Biological Networks}}},
  author = {Camacho, Diogo M. and Collins, Katherine M. and Powers, Rani K. and Costello, James C. and Collins, James J.},
  year = {2018},
  month = jun,
  journal = {Cell},
  volume = {173},
  number = {7},
  pages = {1581--1592},
  issn = {1097-4172},
  doi = {10.1016/j.cell.2018.05.015},
  abstract = {Machine learning, a collection of data-analytical techniques aimed at building predictive models from multi-dimensional datasets, is becoming integral to modern biological research. By enabling one to generate models that learn from large datasets and make predictions on likely outcomes, machine learning can be used to study complex cellular systems such as biological networks. Here, we provide a primer on machine learning for life scientists, including an introduction to deep learning. We discuss opportunities and challenges at the intersection of machine learning and network biology, which could impact disease biology, drug discovery, microbiome research, and synthetic biology.},
  langid = {english},
  pmid = {29887378},
  keywords = {Algorithms,Computational Biology,{Databases, Factual},deep learning,Drug Discovery,Drug-Related Side Effects and Adverse Reactions,Humans,Machine leaning,Machine Learning,Microbiota,network biology,neural networks,{Neural Networks, Computer},synthetic biology,systems biology},
  file = {/home/mayalen/Zotero/storage/B2C99EF3/Camacho et al. - 2018 - Next-Generation Machine Learning for Biological Ne.pdf}
}

@article{choiTelluriumExtensiblePythonbased2018,
  title = {Tellurium: {{An}} Extensible Python-Based Modeling Environment for Systems and Synthetic Biology},
  shorttitle = {Tellurium},
  author = {Choi, Kiri and Medley, J. Kyle and K{\"o}nig, Matthias and Stocking, Kaylene and Smith, Lucian and Gu, Stanley and Sauro, Herbert M.},
  year = {2018},
  month = sep,
  journal = {Biosystems},
  volume = {171},
  pages = {74--79},
  issn = {0303-2647},
  doi = {10.1016/j.biosystems.2018.07.006},
  urldate = {2023-05-23},
  abstract = {Here we present Tellurium, a Python-based environment for model building, simulation, and analysis that facilitates reproducibility of models in systems and synthetic biology. Tellurium is a modular, cross-platform, and open-source simulation environment composed of multiple libraries, plugins, and specialized modules and methods. Tellurium is a self-contained modeling platform which comes with a fully configured Python distribution. Two interfaces are provided, one based on the Spyder IDE which has an accessible user interface akin to MATLAB and a second based on the Jupyter Notebook, which is a format that contains live code, equations, visualizations, and narrative text. Tellurium uses libRoadRunner as the default SBML simulation engine which supports deterministic simulations, stochastic simulations, and steady-state analyses. Tellurium also includes Antimony, a human-readable model definition language which can be converted to and from SBML. Other standard Python scientific libraries such as NumPy, SciPy, and matplotlib are included by default. Additionally, we include several user-friendly plugins and advanced modules for a wide-variety of applications, ranging from complex algorithms for bifurcation analysis to multidimensional parameter scanning. By combining multiple libraries, plugins, and modules into a single package, Tellurium provides a unified but extensible solution for biological modeling and analysis for both novices and experts. Availability: tellurium.analogmachine.org.},
  langid = {english},
  keywords = {SBML,Simulation,Software,Systems biology},
  file = {/home/mayalen/Zotero/storage/W9H86PRS/Choi et al. - 2018 - Tellurium An extensible python-based modeling env.pdf;/home/mayalen/Zotero/storage/PZ6Y3Y6E/S0303264718301254.html}
}

@misc{deepmind2020jax,
  title = {The {{DeepMind JAX Ecosystem}}},
  author = {Babuschkin, Igor and Baumli, Kate and Bell, Alison and Bhupatiraju, Surya and Bruce, Jake and Buchlovsky, Peter and Budden, David and Cai, Trevor and Clark, Aidan and Danihelka, Ivo and Dedieu, Antoine and Fantacci, Claudio and Godwin, Jonathan and Jones, Chris and Hemsley, Ross and Hennigan, Tom and Hessel, Matteo and Hou, Shaobo and Kapturowski, Steven and Keck, Thomas and Kemaev, Iurii and King, Michael and Kunesch, Markus and Martens, Lena and Merzic, Hamza and Mikulik, Vladimir and Norman, Tamara and Papamakarios, George and Quan, John and Ring, Roman and Ruiz, Francisco and Sanchez, Alvaro and Schneider, Rosalia and Sezener, Eren and Spencer, Stephen and Srinivasan, Srivatsan and Stokowiec, Wojciech and Wang, Luyu and Zhou, Guangyao and Viola, Fabio},
  year = {2020}
}

@article{dejongModelingSimulationGenetic2002,
  title = {Modeling and {{Simulation}} of {{Genetic Regulatory Systems}}: {{A Literature Review}}},
  shorttitle = {Modeling and {{Simulation}} of {{Genetic Regulatory Systems}}},
  author = {{de Jong}, Hidde},
  year = {2002},
  month = jan,
  journal = {Journal of Computational Biology},
  volume = {9},
  number = {1},
  pages = {67--103},
  publisher = {{Mary Ann Liebert, Inc., publishers}},
  doi = {10.1089/10665270252833208},
  urldate = {2023-05-25},
  abstract = {In order to understand the functioning of organisms on the molecular level, we need to know which genes are expressed, when and where in the organism, and to which extent. The regulation of gene expression is achieved through genetic regulatory systems structured by networks of interactions between DNA, RNA, proteins, and small molecules. As most genetic regulatory networks of interest involve many components connected through interlocking positive and negative feedback loops, an intuitive understanding of their dynamics is hard to obtain. As a consequence, formal methods and computer tools for the modeling and simulation of genetic regulatory networks will be indispensable. This paper reviews formalisms that have been employed in mathematical biology and bioinformatics to describe genetic regulatory systems, in particular directed graphs, Bayesian networks, Boolean networks and their generalizations, ordinary and partial differential equations, qualitative differential equations, stochastic equations, and rule-based formalisms. In addition, the paper discusses how these formalisms have been used in the simulation of the behavior of actual regulatory systems.},
  keywords = {COMPUTATIONAL BIOLOGY,GENETIC REGULATORY NETWORKS,MATHEMATICAL MODELING,SIMULATION}
}

@article{delgadoComputationalMethodsGene2019,
  title = {Computational Methods for {{Gene Regulatory Networks}} Reconstruction and Analysis: {{A}} Review},
  shorttitle = {Computational Methods for {{Gene Regulatory Networks}} Reconstruction and Analysis},
  author = {Delgado, Fernando M. and {G{\'o}mez-Vela}, Francisco},
  year = {2019},
  month = apr,
  journal = {Artificial Intelligence in Medicine},
  volume = {95},
  pages = {133--145},
  issn = {0933-3657},
  doi = {10.1016/j.artmed.2018.10.006},
  urldate = {2023-05-25},
  abstract = {In the recent years, the vast amount of genetic information generated by new-generation approaches, have led to the need of new data handling methods. The integrative analysis of diverse-nature gene information could provide a much-sought overview to study complex biological systems and processes. In this sense, Gene Regulatory Networks (GRN) arise as an increasingly-promising tool for the modelling and analysis of biological processes. This review is an attempt to summarize the state of the art in the field of GRNs. Essential points in the field are addressed, thereof: (a) the type of data used for network generation, (b) machine learning methods and tools used for network generation, (c) model optimization and (d) computational approaches used for network validation. This survey is intended to provide an overview of the subject for readers to improve their knowledge in the field of GRN for future research.},
  langid = {english},
  keywords = {Gene Network,Gene Network inference,Gene Regulatory Network,Networks validation,Systems biology},
  file = {/home/mayalen/Zotero/storage/3BYLAABT/Delgado and Gómez-Vela - 2019 - Computational methods for Gene Regulatory Networks.pdf;/home/mayalen/Zotero/storage/C46FMLA9/S0933365718303865.html}
}

@article{funahashiCellDesignerProcessDiagram2003,
  title = {{{CellDesigner}}: A Process Diagram Editor for Gene-Regulatory and Biochemical Networks},
  shorttitle = {{{CellDesigner}}},
  author = {Funahashi, Akira and Morohashi, Mineo and Kitano, Hiroaki and Tanimura, Naoki},
  year = {2003},
  month = nov,
  journal = {BIOSILICO},
  volume = {1},
  number = {5},
  pages = {159--162},
  issn = {14785382},
  doi = {10.1016/S1478-5382(03)02370-9},
  urldate = {2023-05-31},
  langid = {english},
  file = {/home/mayalen/Zotero/storage/D9D6747Y/Funahashi et al. - 2003 - CellDesigner a process diagram editor for gene-re.pdf}
}

@article{funahashiCellDesignerVersatileModeling2008,
  title = {{{CellDesigner}} 3.5: {{A Versatile Modeling Tool}} for {{Biochemical Networks}}},
  shorttitle = {{{CellDesigner}} 3.5},
  author = {Funahashi, Akira and Matsuoka, Yukiko and Jouraku, Akiya and Morohashi, Mineo and Kikuchi, Norihiro and Kitano, Hiroaki},
  year = {2008},
  month = aug,
  journal = {Proceedings of the IEEE},
  volume = {96},
  number = {8},
  pages = {1254--1265},
  issn = {1558-2256},
  doi = {10.1109/JPROC.2008.925458},
  abstract = {Understanding of the logic and dynamics of gene-regulatory and biochemical networks is a major challenge of systems biology. To facilitate this research topic, we have developed a modeling/simulating tool called CellDesigner. CellDesigner primarily has capabilities to visualize, model, and simulate gene-regulatory and biochemical networks. Two major characteristics embedded in CellDesigner boost its usability to create/import/export models: 1) solidly defined and comprehensive graphical representation (systems biology graphical notation) of network models and 2) systems biology markup language (SBML) as a model-describing basis, which function as intertool media to import/export SBML-based models. In addition, since its initial release in 2004, we have extended various capabilities of CellDesigner. For example, we integrated other systems biology workbench enabled simulation/analysis software packages. CellDesigner also supports simulation and parameter search, supported by integration with SBML ODE Solver, enabling users to simulate through our sophisticated graphical user interface. Users can also browse and modify existing models by referring to existing databases directly through CellDesigner. Those extended functions empower CellDesigner as not only a modeling/simulating tool but also an integrated analysis suite. CellDesigner is implemented in Java and thus supports various platforms (i.e., Windows, Linux, and MacOS X). CellDesigner is freely available via our Web site.},
  keywords = {Analytical models,Biochemical simulation,Biological system modeling,Graphical user interfaces,kinetic modeling,Logic,Markup languages,SBGN,SBML,Software packages,Solid modeling,systems biology,Systems biology,Usability,Visualization},
  file = {/home/mayalen/Zotero/storage/97CFB9Y2/Funahashi et al. - 2008 - CellDesigner 3.5 A Versatile Modeling Tool for Bi.pdf}
}

@article{glontBioModelsExpandingHorizons2018,
  title = {{{BioModels}}: Expanding Horizons to Include More Modelling Approaches and Formats},
  shorttitle = {{{BioModels}}},
  author = {Glont, Mihai and Nguyen, Tung~V~N and Graesslin, Martin and H{\"a}lke, Robert and Ali, Raza and Schramm, Jochen and Wimalaratne, Sarala M and Kothamachu, Varun B and Rodriguez, Nicolas and Swat, Maciej J and Eils, Jurgen and Eils, Roland and Laibe, Camille and {Malik-Sheriff}, Rahuman S and Chelliah, Vijayalakshmi and Le~Nov{\`e}re, Nicolas and Hermjakob, Henning},
  year = {2018},
  month = jan,
  journal = {Nucleic Acids Research},
  volume = {46},
  number = {D1},
  pages = {D1248-D1253},
  issn = {0305-1048},
  doi = {10.1093/nar/gkx1023},
  urldate = {2023-05-23},
  abstract = {BioModels serves as a central repository of mathematical models representing biological processes. It offers a platform to make mathematical models easily shareable across the systems modelling community, thereby supporting model reuse. To facilitate hosting a broader range of model formats derived from diverse modelling approaches and tools, a new infrastructure for BioModels has been developed that is available at http://www.ebi.ac.uk/biomodels. This new system allows submitting and sharing of a wide range of models with improved support for formats other than SBML. It also offers a version-control backed environment in which authors and curators can work collaboratively to curate models. This article summarises the features available in the current system and discusses the potential benefit they offer to the users over the previous system. In summary, the new portal broadens the scope of models accepted in BioModels and supports collaborative model curation which is crucial for model reproducibility and sharing.},
  file = {/home/mayalen/Zotero/storage/26BJLJ2B/Glont et al. - 2018 - BioModels expanding horizons to include more mode.pdf}
}

@article{hoopsCOPASICOmplexPAthway2006,
  title = {{{COPASI}}\textemdash a {{COmplex PAthway SImulator}}},
  author = {Hoops, Stefan and Sahle, Sven and Gauges, Ralph and Lee, Christine and Pahle, J{\"u}rgen and Simus, Natalia and Singhal, Mudita and Xu, Liang and Mendes, Pedro and Kummer, Ursula},
  year = {2006},
  month = dec,
  journal = {Bioinformatics},
  volume = {22},
  number = {24},
  pages = {3067--3074},
  issn = {1367-4803},
  doi = {10.1093/bioinformatics/btl485},
  urldate = {2023-05-23},
  abstract = {Motivation: Simulation and modeling is becoming a standard approach to understand complex biochemical processes. Therefore, there is a big need for software tools that allow access to diverse simulation and modeling methods as well as support for the usage of these methods.Results: Here, we present COPASI, a platform-independent and user-friendly biochemical simulator that offers several unique features. We discuss numerical issues with these features; in particular, the criteria to switch between stochastic and deterministic simulation methods, hybrid deterministic\textendash stochastic methods, and the importance of random number generator numerical resolution in stochastic simulation.Availability: The complete software is available in binary (executable) for MS Windows, OS X, Linux (Intel) and Sun Solaris (SPARC), as well as the full source code under an open source license from .Contact: ~mendes@vbi.vt.edu},
  file = {/home/mayalen/Zotero/storage/UDCGZXWK/Hoops et al. - 2006 - COPASI—a COmplex PAthway SImulator.pdf;/home/mayalen/Zotero/storage/TB9TKYQM/208398.html}
}

@article{huckaSystemsBiologyMarkup2003,
  title = {The Systems Biology Markup Language ({{SBML}}): A Medium for Representation and Exchange of Biochemical Network Models},
  shorttitle = {The Systems Biology Markup Language ({{SBML}})},
  author = {Hucka, M. and Finney, A. and Sauro, H. M. and Bolouri, H. and Doyle, J. C. and Kitano, H. and Arkin, A. P. and Bornstein, B. J. and Bray, D. and {Cornish-Bowden}, A. and Cuellar, A. A. and Dronov, S. and Gilles, E. D. and Ginkel, M. and Gor, V. and Goryanin, I. I. and Hedley, W. J. and Hodgman, T. C. and Hofmeyr, J.-H. and Hunter, P. J. and Juty, N. S. and Kasberger, J. L. and Kremling, A. and Kummer, U. and Le Nov{\`e}re, N. and Loew, L. M. and Lucio, D. and Mendes, P. and Minch, E. and Mjolsness, E. D. and Nakayama, Y. and Nelson, M. R. and Nielsen, P. F. and Sakurada, T. and Schaff, J. C. and Shapiro, B. E. and Shimizu, T. S. and Spence, H. D. and Stelling, J. and Takahashi, K. and Tomita, M. and Wagner, J. and Wang, J. and {and the rest of the SBML Forum:}},
  year = {2003},
  month = mar,
  journal = {Bioinformatics},
  volume = {19},
  number = {4},
  pages = {524--531},
  issn = {1367-4803},
  doi = {10.1093/bioinformatics/btg015},
  urldate = {2023-05-23},
  abstract = {Motivation: Molecular biotechnology now makes it possible to build elaborate systems models, but the systems biology community needs information standards if models are to be shared, evaluated and developed cooperatively.Results: We summarize the Systems Biology Markup Language (SBML) Level 1, a free, open, XML-based format for representing biochemical reaction networks.  SBML is a software-independent language for describing models common to research in many areas of computational biology, including cell signaling pathways, metabolic pathways, gene regulation, and others.Availability: The specification of SBML Level 1 is freely available from http://www.sbml.org/Contact: sysbio-team@caltech.edu*To whom correspondence should be addressed.},
  file = {/home/mayalen/Zotero/storage/BSY3AHX2/Hucka et al. - 2003 - The systems biology markup language (SBML) a medi.pdf;/home/mayalen/Zotero/storage/39T9AIG2/218599.html}
}

@misc{jax2018github,
  title = {{{JAX}}: Composable Transformations of {{Python}}+{{NumPy}} Programs},
  author = {Bradbury, James and Frostig, Roy and Hawkins, Peter and Johnson, Matthew James and Leary, Chris and Maclaurin, Dougal and Necula, George and Paszke, Adam and VanderPlas, Jake and {Wanderman-Milne}, Skye and Zhang, Qiao},
  year = {2018}
}

@article{kidger2021equinox,
  title = {Equinox: Neural Networks in {{JAX}} via Callable {{PyTrees}} and Filtered Transformations},
  author = {Kidger, Patrick and Garcia, Cristian},
  year = {2021},
  journal = {Differentiable Programming workshop at Neural Information Processing Systems 2021}
}

@article{kitanoSystemsBiologyBrief2002,
  title = {Systems {{Biology}}: {{A Brief Overview}}},
  shorttitle = {Systems {{Biology}}},
  author = {Kitano, Hiroaki},
  year = {2002},
  month = mar,
  journal = {Science},
  volume = {295},
  number = {5560},
  pages = {1662--1664},
  publisher = {{American Association for the Advancement of Science}},
  doi = {10.1126/science.1069492},
  urldate = {2023-05-25},
  abstract = {To understand biology at the system level, we must examine the structure and dynamics of cellular and organismal function, rather than the characteristics of isolated parts of a cell or organism. Properties of systems, such as robustness, emerge as central issues, and understanding these properties may have an impact on the future of medicine. However, many breakthroughs in experimental devices, advanced software, and analytical methods are required before the achievements of systems biology can live up to their much-touted potential.}
}

@article{loewVirtualCellSoftware2001,
  title = {The {{Virtual Cell}}: A Software Environment for Computational Cell Biology},
  shorttitle = {The {{Virtual Cell}}},
  author = {Loew, Leslie M. and Schaff, James C.},
  year = {2001},
  month = oct,
  journal = {Trends in Biotechnology},
  volume = {19},
  number = {10},
  pages = {401--406},
  issn = {0167-7799},
  doi = {10.1016/S0167-7799(01)01740-1},
  urldate = {2023-05-31},
  abstract = {The newly emerging field of computational cell biology requires software tools that address the needs of a broad community of scientists. Cell biological processes are controlled by an interacting set of biochemical and electrophysiological events that are distributed within complex cellular structures. Computational modeling is familiar to researchers in fields such as molecular structure, neurobiology and metabolic pathway engineering, and is rapidly emerging in the area of gene expression. Although some of these established modeling approaches can be adapted to address problems of interest to cell biologists, relatively few software development efforts have been directed at the field as a whole. The Virtual Cell is a computational environment designed for cell biologists as well as for mathematical biologists and bioengineers. It serves to aid the construction of cell biological models and the generation of simulations from them. The system enables the formulation of both compartmental and spatial models, the latter with either idealized or experimentally derived geometries of one, two or three dimensions.},
  langid = {english},
  keywords = {biochemical pathway,cell biology,data visualisation,image,Model,molecular modeling,simulation,virtual cell},
  file = {/home/mayalen/Zotero/storage/K95X8GDA/S0167779901017401.html}
}

@article{malik-sheriffBioModels15Years2020a,
  title = {{{BioModels}}\textemdash 15 Years of Sharing Computational Models in Life Science},
  author = {{Malik-Sheriff}, Rahuman S and Glont, Mihai and Nguyen, Tung V N and Tiwari, Krishna and Roberts, Matthew G and Xavier, Ashley and Vu, Manh T and Men, Jinghao and Maire, Matthieu and Kananathan, Sarubini and Fairbanks, Emma L and Meyer, Johannes P and Arankalle, Chinmay and Varusai, Thawfeek M and {Knight-Schrijver}, Vincent and Li, Lu and {Due{\~n}as-Roca}, Corina and Dass, Gaurhari and Keating, Sarah M and Park, Young M and Buso, Nicola and Rodriguez, Nicolas and Hucka, Michael and Hermjakob, Henning},
  year = {2020},
  month = jan,
  journal = {Nucleic Acids Research},
  volume = {48},
  number = {D1},
  pages = {D407-D415},
  issn = {0305-1048},
  doi = {10.1093/nar/gkz1055},
  urldate = {2023-05-23},
  abstract = {Computational modelling has become increasingly common in life science research. To provide a platform to support universal sharing, easy accessibility and model reproducibility, BioModels (https://www.ebi.ac.uk/biomodels/), a repository for mathematical models, was established in 2005. The current BioModels platform allows submission of models encoded in diverse modelling formats, including SBML, CellML, PharmML, COMBINE archive, MATLAB, Mathematica, R, Python or C++. The models submitted to BioModels are curated to verify the computational representation of the biological process and the reproducibility of the simulation results in the reference publication. The curation also involves encoding models in standard formats and annotation with controlled vocabularies following MIRIAM (minimal information required in the annotation of biochemical models)~guidelines. BioModels now accepts large-scale submission of auto-generated computational models. With gradual growth in content over 15 years, BioModels currently hosts about 2000 models from the published literature. With about 800 curated models, BioModels has become the world's largest repository of curated models and emerged as the third most used data resource after PubMed and Google Scholar among the scientists who use modelling in their research. Thus, BioModels benefits modellers by providing access to reliable and semantically enriched curated models in standard formats that are easy to share, reproduce and reuse.},
  file = {/home/mayalen/Zotero/storage/Y2XS8UUK/Malik-Sheriff et al. - 2020 - BioModels—15 years of sharing computational models.pdf}
}

@article{muzioBiologicalNetworkAnalysis2021,
  title = {Biological Network Analysis with Deep Learning},
  author = {Muzio, Giulia and O'Bray, Leslie and Borgwardt, Karsten},
  year = {2021},
  month = mar,
  journal = {Briefings in Bioinformatics},
  volume = {22},
  number = {2},
  pages = {1515--1530},
  issn = {1477-4054},
  doi = {10.1093/bib/bbaa257},
  urldate = {2023-05-26},
  abstract = {Recent advancements in experimental high-throughput technologies have expanded the availability and quantity of molecular data in biology. Given the importance of interactions in biological processes, such as the interactions between proteins or the bonds within a chemical compound, this data is often represented in the form of a biological network. The rise of this data has created a need for new computational tools to analyze networks. One major trend in the field is to use deep learning for this goal and, more specifically, to use methods that work with networks, the so-called graph neural networks (GNNs). In this article, we describe biological networks and review the principles and underlying algorithms of GNNs. We then discuss domains in bioinformatics in which graph neural networks are frequently being applied at the moment, such as protein function prediction, protein\textendash protein interaction prediction and in silico drug discovery and development. Finally, we highlight application areas such as gene regulatory networks and disease diagnosis where deep learning is emerging as a new tool to answer classic questions like gene interaction prediction and automatic disease prediction from data.},
  file = {/home/mayalen/Zotero/storage/QU7JZH47/Muzio et al. - 2021 - Biological network analysis with deep learning.pdf;/home/mayalen/Zotero/storage/2UN8YQXI/5964185.html}
}

@article{rodriguezSystemsBiologyFormat2016,
  title = {The Systems Biology Format Converter},
  author = {Rodriguez, Nicolas and Pettit, Jean-Baptiste and Dalle Pezze, Piero and Li, Lu and Henry, Arnaud and {van Iersel}, Martijn P. and Jalowicki, Gael and Kutmon, Martina and Natarajan, Kedar N. and Tolnay, David and Stefan, Melanie I. and Evelo, Chris T. and Le Nov{\`e}re, Nicolas},
  year = {2016},
  month = apr,
  journal = {BMC Bioinformatics},
  volume = {17},
  number = {1},
  pages = {154},
  issn = {1471-2105},
  doi = {10.1186/s12859-016-1000-2},
  urldate = {2023-05-23},
  abstract = {Interoperability between formats is a recurring problem in systems biology research. Many tools have been developed to convert computational models from one format to another. However, they have been developed independently, resulting in redundancy of efforts and lack of synergy.},
  keywords = {Converter,Format,SBML,Systems biology},
  file = {/home/mayalen/Zotero/storage/DNDX29QF/Rodriguez et al. - 2016 - The systems biology format converter.pdf}
}

@article{ruggieroSBMLtoODEpySoftwareProgram2019,
  title = {{{SBMLtoODEpy}}: {{A}} Software Program for Converting {{SBML}} Models into {{ODE}} Models in {{Python}}},
  shorttitle = {{{SBMLtoODEpy}}},
  author = {Ruggiero, Steve M. and Versypt, Ashlee N. Ford},
  year = {2019},
  month = sep,
  journal = {Journal of Open Source Software},
  volume = {5},
  number = {53},
  pages = {1643},
  issn = {2475-9066},
  doi = {10.21105/joss.01643},
  urldate = {2023-05-23},
  abstract = {Ruggiero et al., (2020). SBMLtoODEpy: A software program for converting SBML models into ODE models in Python. Journal of Open Source Software, 5(53), 1643, https://doi.org/10.21105/joss.01643},
  langid = {english},
  file = {/home/mayalen/Zotero/storage/77LYRNBU/Ruggiero and Versypt - 2019 - SBMLtoODEpy A software program for converting SBM.pdf}
}

@article{slepchenkoQuantitativeCellBiology2003a,
  title = {Quantitative Cell Biology with the {{Virtual Cell}}},
  author = {Slepchenko, Boris M. and Schaff, James C. and Macara, Ian and Loew, Leslie M.},
  year = {2003},
  month = nov,
  journal = {Trends in Cell Biology},
  volume = {13},
  number = {11},
  pages = {570--576},
  issn = {0962-8924},
  doi = {10.1016/j.tcb.2003.09.002},
  urldate = {2023-05-31},
  abstract = {Cell biological processes are controlled by an interacting set of biochemical and electrophysiological events that are distributed within complex cellular structures. Computational models, comprising quantitative data on the interacting molecular participants in these events, provide a means for applying the scientific method to these complex systems. The Virtual Cell is a computational environment designed for cell biologists, to facilitate the construction of models and the generation of predictive simulations from them. This review summarizes how a Virtual Cell model is assembled and describes the physical principles underlying the calculations that are performed. Applications to problems in nucleocytoplasmic transport and intracellular calcium dynamics will illustrate the power of this paradigm for elucidating cell biology.},
  langid = {english},
  file = {/home/mayalen/Zotero/storage/AG3LMZMB/S0962892403002150.html}
}

@article{somogyiLibRoadRunnerHighPerformance2015,
  title = {{{libRoadRunner}}: A High Performance {{SBML}} Simulation and Analysis Library},
  shorttitle = {{{libRoadRunner}}},
  author = {Somogyi, Endre T. and Bouteiller, Jean-Marie and Glazier, James A. and K{\"o}nig, Matthias and Medley, J. Kyle and Swat, Maciej H. and Sauro, Herbert M.},
  year = {2015},
  month = oct,
  journal = {Bioinformatics},
  volume = {31},
  number = {20},
  pages = {3315--3321},
  issn = {1367-4803},
  doi = {10.1093/bioinformatics/btv363},
  urldate = {2023-05-23},
  abstract = {Motivation: This article presents libRoadRunner, an extensible, high-performance, cross-platform, open-source software library for the simulation and analysis of models expressed using Systems Biology Markup Language (SBML). SBML is the most widely used standard for representing dynamic networks, especially biochemical networks. libRoadRunner is fast enough to support large-scale problems such as tissue models, studies that require large numbers of repeated runs and interactive simulations.Results: libRoadRunner is a self-contained library, able to run both as a component inside other tools via its C++ and C bindings, and interactively through its Python interface. Its Python Application Programming Interface (API) is similar to the APIs of MATLAB (www.mathworks.com) and SciPy (http://www.scipy.org/), making it fast and easy to learn. libRoadRunner uses a custom Just-In-Time (JIT) compiler built on the widely used LLVM JIT compiler framework. It compiles SBML-specified models directly into native machine code for a variety of processors, making it appropriate for solving extremely large models or repeated runs. libRoadRunner is flexible, supporting the bulk of the SBML specification (except for delay and non-linear algebraic equations) including several SBML extensions (composition and distributions). It offers multiple deterministic and stochastic integrators, as well as tools for steady-state analysis, stability analysis and structural analysis of the stoichiometric matrix.Availability and implementation: libRoadRunner binary distributions are available for Mac OS X, Linux and Windows. The library is licensed under Apache License Version 2.0. libRoadRunner is also available for ARM-based computers such as the Raspberry Pi. http://www.libroadrunner.org provides online documentation, full build instructions, binaries and a git source repository.Contacts: ~hsauro@u.washington.edu or somogyie@indiana.eduSupplementary information: ~Supplementary data are available at Bioinformatics online.},
  file = {/home/mayalen/Zotero/storage/HHNFMDAD/Somogyi et al. - 2015 - libRoadRunner a high performance SBML simulation .pdf;/home/mayalen/Zotero/storage/M227REMM/195758.html}
}

@misc{SystemsBiologyMarkup,
  title = {The {{Systems Biology Markup Language}} ({{SBML}}): {{Language Specification}} for {{Level}} 3 {{Version}} 1 {{Core}} - {{PMC}}},
  urldate = {2023-05-23},
  howpublished = {https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5451324/},
  file = {/home/mayalen/Zotero/storage/FUS7S64E/PMC5451324.html}
}

@misc{TelluriumNotebooksEnvironment,
  title = {Tellurium Notebooks\textemdash{{An}} Environment for Reproducible Dynamical Modeling in Systems Biology | {{PLOS Computational Biology}}},
  urldate = {2023-05-23},
  howpublished = {https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1006220},
  file = {/home/mayalen/Zotero/storage/VW5BC6CE/article.html}
}

@article{welshLibRoadRunnerHighPerformance2023,
  title = {{{libRoadRunner}} 2.0: A High Performance {{SBML}} Simulation and Analysis Library},
  shorttitle = {{{libRoadRunner}} 2.0},
  author = {Welsh, Ciaran and Xu, Jin and Smith, Lucian and K{\"o}nig, Matthias and Choi, Kiri and Sauro, Herbert M},
  year = {2023},
  month = jan,
  journal = {Bioinformatics},
  volume = {39},
  number = {1},
  pages = {btac770},
  issn = {1367-4811},
  doi = {10.1093/bioinformatics/btac770},
  urldate = {2023-05-23},
  abstract = {This article presents libRoadRunner 2.0, an extensible, high-performance, cross-platform, open-source software library for the simulation and analysis of models expressed using the systems biology markup language (SBML).libRoadRunner is a self-contained library, able to run either as a component inside other tools via its C++, C and Python APIs, or interactively through its Python or Julia interface. libRoadRunner uses a custom just-in-time (JIT) compiler built on the widely used LLVM JIT compiler framework. It compiles SBML-specified models directly into native machine code for a large variety of processors, making it fast enough to simulate extremely large models or repeated runs in reasonable timeframes. libRoadRunner is flexible, supporting the bulk of the SBML specification (except for delay and non-linear algebraic equations) as well as several SBML extensions such as hierarchical composition and probability distributions. It offers multiple deterministic and stochastic integrators, as well as tools for steady-state, sensitivity, stability and structural analyses.libRoadRunner binary distributions for Windows, Mac OS and Linux, Julia and Python bindings, source code and documentation are all available at https://github.com/sys-bio/roadrunner, and Python bindings are also available via pip. The source code can be compiled for the supported systems as well as in principle any system supported by LLVM-13, such as ARM-based computers like the Raspberry Pi. The library is licensed under the Apache License Version 2.0.},
  file = {/home/mayalen/Zotero/storage/3RLJLRVQ/Welsh et al. - 2023 - libRoadRunner 2.0 a high performance SBML simulat.pdf;/home/mayalen/Zotero/storage/AWEYDVI5/6883908.html}
}
